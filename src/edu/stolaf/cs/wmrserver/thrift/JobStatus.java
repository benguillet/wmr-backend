/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package edu.stolaf.cs.wmrserver.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JobStatus implements org.apache.thrift.TBase<JobStatus, JobStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobStatus");

  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapStatus", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField REDUCE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("reduceStatus", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private JobInfo info; // required
  private State state; // required
  private PhaseStatus mapStatus; // required
  private PhaseStatus reduceStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INFO((short)1, "info"),
    /**
     * 
     * @see State
     */
    STATE((short)2, "state"),
    MAP_STATUS((short)3, "mapStatus"),
    REDUCE_STATUS((short)4, "reduceStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INFO
          return INFO;
        case 2: // STATE
          return STATE;
        case 3: // MAP_STATUS
          return MAP_STATUS;
        case 4: // REDUCE_STATUS
          return REDUCE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobInfo.class)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, State.class)));
    tmpMap.put(_Fields.MAP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("mapStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PhaseStatus.class)));
    tmpMap.put(_Fields.REDUCE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("reduceStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PhaseStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobStatus.class, metaDataMap);
  }

  public JobStatus() {
  }

  public JobStatus(
    JobInfo info,
    State state)
  {
    this();
    this.info = info;
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobStatus(JobStatus other) {
    if (other.isSetInfo()) {
      this.info = new JobInfo(other.info);
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetMapStatus()) {
      this.mapStatus = new PhaseStatus(other.mapStatus);
    }
    if (other.isSetReduceStatus()) {
      this.reduceStatus = new PhaseStatus(other.reduceStatus);
    }
  }

  public JobStatus deepCopy() {
    return new JobStatus(this);
  }

  @Override
  public void clear() {
    this.info = null;
    this.state = null;
    this.mapStatus = null;
    this.reduceStatus = null;
  }

  public JobInfo getInfo() {
    return this.info;
  }

  public void setInfo(JobInfo info) {
    this.info = info;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  /**
   * 
   * @see State
   */
  public State getState() {
    return this.state;
  }

  /**
   * 
   * @see State
   */
  public void setState(State state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public PhaseStatus getMapStatus() {
    return this.mapStatus;
  }

  public void setMapStatus(PhaseStatus mapStatus) {
    this.mapStatus = mapStatus;
  }

  public void unsetMapStatus() {
    this.mapStatus = null;
  }

  /** Returns true if field mapStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMapStatus() {
    return this.mapStatus != null;
  }

  public void setMapStatusIsSet(boolean value) {
    if (!value) {
      this.mapStatus = null;
    }
  }

  public PhaseStatus getReduceStatus() {
    return this.reduceStatus;
  }

  public void setReduceStatus(PhaseStatus reduceStatus) {
    this.reduceStatus = reduceStatus;
  }

  public void unsetReduceStatus() {
    this.reduceStatus = null;
  }

  /** Returns true if field reduceStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetReduceStatus() {
    return this.reduceStatus != null;
  }

  public void setReduceStatusIsSet(boolean value) {
    if (!value) {
      this.reduceStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((JobInfo)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((State)value);
      }
      break;

    case MAP_STATUS:
      if (value == null) {
        unsetMapStatus();
      } else {
        setMapStatus((PhaseStatus)value);
      }
      break;

    case REDUCE_STATUS:
      if (value == null) {
        unsetReduceStatus();
      } else {
        setReduceStatus((PhaseStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INFO:
      return getInfo();

    case STATE:
      return getState();

    case MAP_STATUS:
      return getMapStatus();

    case REDUCE_STATUS:
      return getReduceStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INFO:
      return isSetInfo();
    case STATE:
      return isSetState();
    case MAP_STATUS:
      return isSetMapStatus();
    case REDUCE_STATUS:
      return isSetReduceStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobStatus)
      return this.equals((JobStatus)that);
    return false;
  }

  public boolean equals(JobStatus that) {
    if (that == null)
      return false;

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_mapStatus = true && this.isSetMapStatus();
    boolean that_present_mapStatus = true && that.isSetMapStatus();
    if (this_present_mapStatus || that_present_mapStatus) {
      if (!(this_present_mapStatus && that_present_mapStatus))
        return false;
      if (!this.mapStatus.equals(that.mapStatus))
        return false;
    }

    boolean this_present_reduceStatus = true && this.isSetReduceStatus();
    boolean that_present_reduceStatus = true && that.isSetReduceStatus();
    if (this_present_reduceStatus || that_present_reduceStatus) {
      if (!(this_present_reduceStatus && that_present_reduceStatus))
        return false;
      if (!this.reduceStatus.equals(that.reduceStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JobStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JobStatus typedOther = (JobStatus)other;

    lastComparison = Boolean.valueOf(isSetInfo()).compareTo(typedOther.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, typedOther.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapStatus()).compareTo(typedOther.isSetMapStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapStatus, typedOther.mapStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReduceStatus()).compareTo(typedOther.isSetReduceStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReduceStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reduceStatus, typedOther.reduceStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // INFO
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.info = new JobInfo();
            this.info.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.state = State.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MAP_STATUS
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.mapStatus = new PhaseStatus();
            this.mapStatus.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REDUCE_STATUS
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.reduceStatus = new PhaseStatus();
            this.reduceStatus.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.info != null) {
      oprot.writeFieldBegin(INFO_FIELD_DESC);
      this.info.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state.getValue());
      oprot.writeFieldEnd();
    }
    if (this.mapStatus != null) {
      if (isSetMapStatus()) {
        oprot.writeFieldBegin(MAP_STATUS_FIELD_DESC);
        this.mapStatus.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.reduceStatus != null) {
      if (isSetReduceStatus()) {
        oprot.writeFieldBegin(REDUCE_STATUS_FIELD_DESC);
        this.reduceStatus.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobStatus(");
    boolean first = true;

    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      sb.append(this.info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (isSetMapStatus()) {
      if (!first) sb.append(", ");
      sb.append("mapStatus:");
      if (this.mapStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.mapStatus);
      }
      first = false;
    }
    if (isSetReduceStatus()) {
      if (!first) sb.append(", ");
      sb.append("reduceStatus:");
      if (this.reduceStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.reduceStatus);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

