/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package edu.stolaf.cs.wmrserver.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * If #output is not set and outputPages > 0, then call JobService#getOutput()
 * to get the first page.
 */
public class PhaseStatus implements org.apache.thrift.TBase<PhaseStatus, PhaseStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PhaseStatus");

  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OUTPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("output", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("errors", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTasks", org.apache.thrift.protocol.TType.I32, (short)8);

  private double progress; // required
  private State state; // required
  private int code; // required
  private String output; // required
  private String outputPath; // required
  private String errors; // required
  private int totalTasks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROGRESS((short)1, "progress"),
    /**
     * 
     * @see State
     */
    STATE((short)2, "state"),
    CODE((short)3, "code"),
    OUTPUT((short)4, "output"),
    OUTPUT_PATH((short)7, "outputPath"),
    ERRORS((short)5, "errors"),
    TOTAL_TASKS((short)8, "totalTasks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROGRESS
          return PROGRESS;
        case 2: // STATE
          return STATE;
        case 3: // CODE
          return CODE;
        case 4: // OUTPUT
          return OUTPUT;
        case 7: // OUTPUT_PATH
          return OUTPUT_PATH;
        case 5: // ERRORS
          return ERRORS;
        case 8: // TOTAL_TASKS
          return TOTAL_TASKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROGRESS_ISSET_ID = 0;
  private static final int __CODE_ISSET_ID = 1;
  private static final int __TOTALTASKS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, State.class)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT, new org.apache.thrift.meta_data.FieldMetaData("output", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERRORS, new org.apache.thrift.meta_data.FieldMetaData("errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_TASKS, new org.apache.thrift.meta_data.FieldMetaData("totalTasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PhaseStatus.class, metaDataMap);
  }

  public PhaseStatus() {
  }

  public PhaseStatus(
    double progress,
    State state)
  {
    this();
    this.progress = progress;
    setProgressIsSet(true);
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PhaseStatus(PhaseStatus other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.progress = other.progress;
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.code = other.code;
    if (other.isSetOutput()) {
      this.output = other.output;
    }
    if (other.isSetOutputPath()) {
      this.outputPath = other.outputPath;
    }
    if (other.isSetErrors()) {
      this.errors = other.errors;
    }
    this.totalTasks = other.totalTasks;
  }

  public PhaseStatus deepCopy() {
    return new PhaseStatus(this);
  }

  @Override
  public void clear() {
    setProgressIsSet(false);
    this.progress = 0.0;
    this.state = null;
    setCodeIsSet(false);
    this.code = 0;
    this.output = null;
    this.outputPath = null;
    this.errors = null;
    setTotalTasksIsSet(false);
    this.totalTasks = 0;
  }

  public double getProgress() {
    return this.progress;
  }

  public void setProgress(double progress) {
    this.progress = progress;
    setProgressIsSet(true);
  }

  public void unsetProgress() {
    __isset_bit_vector.clear(__PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return __isset_bit_vector.get(__PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bit_vector.set(__PROGRESS_ISSET_ID, value);
  }

  /**
   * 
   * @see State
   */
  public State getState() {
    return this.state;
  }

  /**
   * 
   * @see State
   */
  public void setState(State state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getCode() {
    return this.code;
  }

  public void setCode(int code) {
    this.code = code;
    setCodeIsSet(true);
  }

  public void unsetCode() {
    __isset_bit_vector.clear(__CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return __isset_bit_vector.get(__CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bit_vector.set(__CODE_ISSET_ID, value);
  }

  public String getOutput() {
    return this.output;
  }

  public void setOutput(String output) {
    this.output = output;
  }

  public void unsetOutput() {
    this.output = null;
  }

  /** Returns true if field output is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput() {
    return this.output != null;
  }

  public void setOutputIsSet(boolean value) {
    if (!value) {
      this.output = null;
    }
  }

  public String getOutputPath() {
    return this.outputPath;
  }

  public void setOutputPath(String outputPath) {
    this.outputPath = outputPath;
  }

  public void unsetOutputPath() {
    this.outputPath = null;
  }

  /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputPath() {
    return this.outputPath != null;
  }

  public void setOutputPathIsSet(boolean value) {
    if (!value) {
      this.outputPath = null;
    }
  }

  public String getErrors() {
    return this.errors;
  }

  public void setErrors(String errors) {
    this.errors = errors;
  }

  public void unsetErrors() {
    this.errors = null;
  }

  /** Returns true if field errors is set (has been assigned a value) and false otherwise */
  public boolean isSetErrors() {
    return this.errors != null;
  }

  public void setErrorsIsSet(boolean value) {
    if (!value) {
      this.errors = null;
    }
  }

  public int getTotalTasks() {
    return this.totalTasks;
  }

  public void setTotalTasks(int totalTasks) {
    this.totalTasks = totalTasks;
    setTotalTasksIsSet(true);
  }

  public void unsetTotalTasks() {
    __isset_bit_vector.clear(__TOTALTASKS_ISSET_ID);
  }

  /** Returns true if field totalTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTasks() {
    return __isset_bit_vector.get(__TOTALTASKS_ISSET_ID);
  }

  public void setTotalTasksIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALTASKS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Double)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((State)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Integer)value);
      }
      break;

    case OUTPUT:
      if (value == null) {
        unsetOutput();
      } else {
        setOutput((String)value);
      }
      break;

    case OUTPUT_PATH:
      if (value == null) {
        unsetOutputPath();
      } else {
        setOutputPath((String)value);
      }
      break;

    case ERRORS:
      if (value == null) {
        unsetErrors();
      } else {
        setErrors((String)value);
      }
      break;

    case TOTAL_TASKS:
      if (value == null) {
        unsetTotalTasks();
      } else {
        setTotalTasks((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROGRESS:
      return Double.valueOf(getProgress());

    case STATE:
      return getState();

    case CODE:
      return Integer.valueOf(getCode());

    case OUTPUT:
      return getOutput();

    case OUTPUT_PATH:
      return getOutputPath();

    case ERRORS:
      return getErrors();

    case TOTAL_TASKS:
      return Integer.valueOf(getTotalTasks());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROGRESS:
      return isSetProgress();
    case STATE:
      return isSetState();
    case CODE:
      return isSetCode();
    case OUTPUT:
      return isSetOutput();
    case OUTPUT_PATH:
      return isSetOutputPath();
    case ERRORS:
      return isSetErrors();
    case TOTAL_TASKS:
      return isSetTotalTasks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PhaseStatus)
      return this.equals((PhaseStatus)that);
    return false;
  }

  public boolean equals(PhaseStatus that) {
    if (that == null)
      return false;

    boolean this_present_progress = true;
    boolean that_present_progress = true;
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }

    boolean this_present_output = true && this.isSetOutput();
    boolean that_present_output = true && that.isSetOutput();
    if (this_present_output || that_present_output) {
      if (!(this_present_output && that_present_output))
        return false;
      if (!this.output.equals(that.output))
        return false;
    }

    boolean this_present_outputPath = true && this.isSetOutputPath();
    boolean that_present_outputPath = true && that.isSetOutputPath();
    if (this_present_outputPath || that_present_outputPath) {
      if (!(this_present_outputPath && that_present_outputPath))
        return false;
      if (!this.outputPath.equals(that.outputPath))
        return false;
    }

    boolean this_present_errors = true && this.isSetErrors();
    boolean that_present_errors = true && that.isSetErrors();
    if (this_present_errors || that_present_errors) {
      if (!(this_present_errors && that_present_errors))
        return false;
      if (!this.errors.equals(that.errors))
        return false;
    }

    boolean this_present_totalTasks = true && this.isSetTotalTasks();
    boolean that_present_totalTasks = true && that.isSetTotalTasks();
    if (this_present_totalTasks || that_present_totalTasks) {
      if (!(this_present_totalTasks && that_present_totalTasks))
        return false;
      if (this.totalTasks != that.totalTasks)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PhaseStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PhaseStatus typedOther = (PhaseStatus)other;

    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(typedOther.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, typedOther.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput()).compareTo(typedOther.isSetOutput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output, typedOther.output);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputPath()).compareTo(typedOther.isSetOutputPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, typedOther.outputPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrors()).compareTo(typedOther.isSetErrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errors, typedOther.errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTasks()).compareTo(typedOther.isSetTotalTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTasks, typedOther.totalTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PROGRESS
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.progress = iprot.readDouble();
            setProgressIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.state = State.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CODE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.code = iprot.readI32();
            setCodeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // OUTPUT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.output = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // OUTPUT_PATH
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.outputPath = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ERRORS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.errors = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // TOTAL_TASKS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.totalTasks = iprot.readI32();
            setTotalTasksIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
    oprot.writeDouble(this.progress);
    oprot.writeFieldEnd();
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state.getValue());
      oprot.writeFieldEnd();
    }
    if (isSetCode()) {
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(this.code);
      oprot.writeFieldEnd();
    }
    if (this.output != null) {
      if (isSetOutput()) {
        oprot.writeFieldBegin(OUTPUT_FIELD_DESC);
        oprot.writeString(this.output);
        oprot.writeFieldEnd();
      }
    }
    if (this.errors != null) {
      if (isSetErrors()) {
        oprot.writeFieldBegin(ERRORS_FIELD_DESC);
        oprot.writeString(this.errors);
        oprot.writeFieldEnd();
      }
    }
    if (this.outputPath != null) {
      if (isSetOutputPath()) {
        oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
        oprot.writeString(this.outputPath);
        oprot.writeFieldEnd();
      }
    }
    if (isSetTotalTasks()) {
      oprot.writeFieldBegin(TOTAL_TASKS_FIELD_DESC);
      oprot.writeI32(this.totalTasks);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PhaseStatus(");
    boolean first = true;

    sb.append("progress:");
    sb.append(this.progress);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (isSetCode()) {
      if (!first) sb.append(", ");
      sb.append("code:");
      sb.append(this.code);
      first = false;
    }
    if (isSetOutput()) {
      if (!first) sb.append(", ");
      sb.append("output:");
      if (this.output == null) {
        sb.append("null");
      } else {
        sb.append(this.output);
      }
      first = false;
    }
    if (isSetOutputPath()) {
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
    }
    if (isSetErrors()) {
      if (!first) sb.append(", ");
      sb.append("errors:");
      if (this.errors == null) {
        sb.append("null");
      } else {
        sb.append(this.errors);
      }
      first = false;
    }
    if (isSetTotalTasks()) {
      if (!first) sb.append(", ");
      sb.append("totalTasks:");
      sb.append(this.totalTasks);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

