/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package edu.stolaf.cs.wmrserver.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JobRequest implements org.apache.thrift.TBase<JobRequest, JobRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobRequest");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("test", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("mapper", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REDUCER_FIELD_DESC = new org.apache.thrift.protocol.TField("reducer", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAP_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapTasks", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REDUCE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("reduceTasks", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NUMERIC_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("numericSort", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private String name; // required
  private String user; // required
  private String language; // required
  private boolean test; // required
  private String input; // required
  private String mapper; // required
  private String reducer; // required
  private int mapTasks; // required
  private int reduceTasks; // required
  private boolean numericSort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    USER((short)2, "user"),
    LANGUAGE((short)3, "language"),
    TEST((short)4, "test"),
    INPUT((short)10, "input"),
    MAPPER((short)6, "mapper"),
    REDUCER((short)7, "reducer"),
    MAP_TASKS((short)8, "mapTasks"),
    REDUCE_TASKS((short)9, "reduceTasks"),
    NUMERIC_SORT((short)11, "numericSort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // USER
          return USER;
        case 3: // LANGUAGE
          return LANGUAGE;
        case 4: // TEST
          return TEST;
        case 10: // INPUT
          return INPUT;
        case 6: // MAPPER
          return MAPPER;
        case 7: // REDUCER
          return REDUCER;
        case 8: // MAP_TASKS
          return MAP_TASKS;
        case 9: // REDUCE_TASKS
          return REDUCE_TASKS;
        case 11: // NUMERIC_SORT
          return NUMERIC_SORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEST_ISSET_ID = 0;
  private static final int __MAPTASKS_ISSET_ID = 1;
  private static final int __REDUCETASKS_ISSET_ID = 2;
  private static final int __NUMERICSORT_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEST, new org.apache.thrift.meta_data.FieldMetaData("test", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAPPER, new org.apache.thrift.meta_data.FieldMetaData("mapper", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REDUCER, new org.apache.thrift.meta_data.FieldMetaData("reducer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_TASKS, new org.apache.thrift.meta_data.FieldMetaData("mapTasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REDUCE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("reduceTasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMERIC_SORT, new org.apache.thrift.meta_data.FieldMetaData("numericSort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobRequest.class, metaDataMap);
  }

  public JobRequest() {
    this.numericSort = false;

  }

  public JobRequest(
    String name,
    String user,
    String language,
    boolean test,
    String input,
    String mapper,
    String reducer,
    boolean numericSort)
  {
    this();
    this.name = name;
    this.user = user;
    this.language = language;
    this.test = test;
    setTestIsSet(true);
    this.input = input;
    this.mapper = mapper;
    this.reducer = reducer;
    this.numericSort = numericSort;
    setNumericSortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobRequest(JobRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    this.test = other.test;
    if (other.isSetInput()) {
      this.input = other.input;
    }
    if (other.isSetMapper()) {
      this.mapper = other.mapper;
    }
    if (other.isSetReducer()) {
      this.reducer = other.reducer;
    }
    this.mapTasks = other.mapTasks;
    this.reduceTasks = other.reduceTasks;
    this.numericSort = other.numericSort;
  }

  public JobRequest deepCopy() {
    return new JobRequest(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.user = null;
    this.language = null;
    setTestIsSet(false);
    this.test = false;
    this.input = null;
    this.mapper = null;
    this.reducer = null;
    setMapTasksIsSet(false);
    this.mapTasks = 0;
    setReduceTasksIsSet(false);
    this.reduceTasks = 0;
    this.numericSort = false;

  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public boolean isTest() {
    return this.test;
  }

  public void setTest(boolean test) {
    this.test = test;
    setTestIsSet(true);
  }

  public void unsetTest() {
    __isset_bit_vector.clear(__TEST_ISSET_ID);
  }

  /** Returns true if field test is set (has been assigned a value) and false otherwise */
  public boolean isSetTest() {
    return __isset_bit_vector.get(__TEST_ISSET_ID);
  }

  public void setTestIsSet(boolean value) {
    __isset_bit_vector.set(__TEST_ISSET_ID, value);
  }

  public String getInput() {
    return this.input;
  }

  public void setInput(String input) {
    this.input = input;
  }

  public void unsetInput() {
    this.input = null;
  }

  /** Returns true if field input is set (has been assigned a value) and false otherwise */
  public boolean isSetInput() {
    return this.input != null;
  }

  public void setInputIsSet(boolean value) {
    if (!value) {
      this.input = null;
    }
  }

  public String getMapper() {
    return this.mapper;
  }

  public void setMapper(String mapper) {
    this.mapper = mapper;
  }

  public void unsetMapper() {
    this.mapper = null;
  }

  /** Returns true if field mapper is set (has been assigned a value) and false otherwise */
  public boolean isSetMapper() {
    return this.mapper != null;
  }

  public void setMapperIsSet(boolean value) {
    if (!value) {
      this.mapper = null;
    }
  }

  public String getReducer() {
    return this.reducer;
  }

  public void setReducer(String reducer) {
    this.reducer = reducer;
  }

  public void unsetReducer() {
    this.reducer = null;
  }

  /** Returns true if field reducer is set (has been assigned a value) and false otherwise */
  public boolean isSetReducer() {
    return this.reducer != null;
  }

  public void setReducerIsSet(boolean value) {
    if (!value) {
      this.reducer = null;
    }
  }

  public int getMapTasks() {
    return this.mapTasks;
  }

  public void setMapTasks(int mapTasks) {
    this.mapTasks = mapTasks;
    setMapTasksIsSet(true);
  }

  public void unsetMapTasks() {
    __isset_bit_vector.clear(__MAPTASKS_ISSET_ID);
  }

  /** Returns true if field mapTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetMapTasks() {
    return __isset_bit_vector.get(__MAPTASKS_ISSET_ID);
  }

  public void setMapTasksIsSet(boolean value) {
    __isset_bit_vector.set(__MAPTASKS_ISSET_ID, value);
  }

  public int getReduceTasks() {
    return this.reduceTasks;
  }

  public void setReduceTasks(int reduceTasks) {
    this.reduceTasks = reduceTasks;
    setReduceTasksIsSet(true);
  }

  public void unsetReduceTasks() {
    __isset_bit_vector.clear(__REDUCETASKS_ISSET_ID);
  }

  /** Returns true if field reduceTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetReduceTasks() {
    return __isset_bit_vector.get(__REDUCETASKS_ISSET_ID);
  }

  public void setReduceTasksIsSet(boolean value) {
    __isset_bit_vector.set(__REDUCETASKS_ISSET_ID, value);
  }

  public boolean isNumericSort() {
    return this.numericSort;
  }

  public void setNumericSort(boolean numericSort) {
    this.numericSort = numericSort;
    setNumericSortIsSet(true);
  }

  public void unsetNumericSort() {
    __isset_bit_vector.clear(__NUMERICSORT_ISSET_ID);
  }

  /** Returns true if field numericSort is set (has been assigned a value) and false otherwise */
  public boolean isSetNumericSort() {
    return __isset_bit_vector.get(__NUMERICSORT_ISSET_ID);
  }

  public void setNumericSortIsSet(boolean value) {
    __isset_bit_vector.set(__NUMERICSORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case TEST:
      if (value == null) {
        unsetTest();
      } else {
        setTest((Boolean)value);
      }
      break;

    case INPUT:
      if (value == null) {
        unsetInput();
      } else {
        setInput((String)value);
      }
      break;

    case MAPPER:
      if (value == null) {
        unsetMapper();
      } else {
        setMapper((String)value);
      }
      break;

    case REDUCER:
      if (value == null) {
        unsetReducer();
      } else {
        setReducer((String)value);
      }
      break;

    case MAP_TASKS:
      if (value == null) {
        unsetMapTasks();
      } else {
        setMapTasks((Integer)value);
      }
      break;

    case REDUCE_TASKS:
      if (value == null) {
        unsetReduceTasks();
      } else {
        setReduceTasks((Integer)value);
      }
      break;

    case NUMERIC_SORT:
      if (value == null) {
        unsetNumericSort();
      } else {
        setNumericSort((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case USER:
      return getUser();

    case LANGUAGE:
      return getLanguage();

    case TEST:
      return Boolean.valueOf(isTest());

    case INPUT:
      return getInput();

    case MAPPER:
      return getMapper();

    case REDUCER:
      return getReducer();

    case MAP_TASKS:
      return Integer.valueOf(getMapTasks());

    case REDUCE_TASKS:
      return Integer.valueOf(getReduceTasks());

    case NUMERIC_SORT:
      return Boolean.valueOf(isNumericSort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case USER:
      return isSetUser();
    case LANGUAGE:
      return isSetLanguage();
    case TEST:
      return isSetTest();
    case INPUT:
      return isSetInput();
    case MAPPER:
      return isSetMapper();
    case REDUCER:
      return isSetReducer();
    case MAP_TASKS:
      return isSetMapTasks();
    case REDUCE_TASKS:
      return isSetReduceTasks();
    case NUMERIC_SORT:
      return isSetNumericSort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobRequest)
      return this.equals((JobRequest)that);
    return false;
  }

  public boolean equals(JobRequest that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_test = true;
    boolean that_present_test = true;
    if (this_present_test || that_present_test) {
      if (!(this_present_test && that_present_test))
        return false;
      if (this.test != that.test)
        return false;
    }

    boolean this_present_input = true && this.isSetInput();
    boolean that_present_input = true && that.isSetInput();
    if (this_present_input || that_present_input) {
      if (!(this_present_input && that_present_input))
        return false;
      if (!this.input.equals(that.input))
        return false;
    }

    boolean this_present_mapper = true && this.isSetMapper();
    boolean that_present_mapper = true && that.isSetMapper();
    if (this_present_mapper || that_present_mapper) {
      if (!(this_present_mapper && that_present_mapper))
        return false;
      if (!this.mapper.equals(that.mapper))
        return false;
    }

    boolean this_present_reducer = true && this.isSetReducer();
    boolean that_present_reducer = true && that.isSetReducer();
    if (this_present_reducer || that_present_reducer) {
      if (!(this_present_reducer && that_present_reducer))
        return false;
      if (!this.reducer.equals(that.reducer))
        return false;
    }

    boolean this_present_mapTasks = true && this.isSetMapTasks();
    boolean that_present_mapTasks = true && that.isSetMapTasks();
    if (this_present_mapTasks || that_present_mapTasks) {
      if (!(this_present_mapTasks && that_present_mapTasks))
        return false;
      if (this.mapTasks != that.mapTasks)
        return false;
    }

    boolean this_present_reduceTasks = true && this.isSetReduceTasks();
    boolean that_present_reduceTasks = true && that.isSetReduceTasks();
    if (this_present_reduceTasks || that_present_reduceTasks) {
      if (!(this_present_reduceTasks && that_present_reduceTasks))
        return false;
      if (this.reduceTasks != that.reduceTasks)
        return false;
    }

    boolean this_present_numericSort = true;
    boolean that_present_numericSort = true;
    if (this_present_numericSort || that_present_numericSort) {
      if (!(this_present_numericSort && that_present_numericSort))
        return false;
      if (this.numericSort != that.numericSort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(JobRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    JobRequest typedOther = (JobRequest)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTest()).compareTo(typedOther.isSetTest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.test, typedOther.test);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInput()).compareTo(typedOther.isSetInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, typedOther.input);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapper()).compareTo(typedOther.isSetMapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapper, typedOther.mapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReducer()).compareTo(typedOther.isSetReducer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReducer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reducer, typedOther.reducer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapTasks()).compareTo(typedOther.isSetMapTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapTasks, typedOther.mapTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReduceTasks()).compareTo(typedOther.isSetReduceTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReduceTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reduceTasks, typedOther.reduceTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumericSort()).compareTo(typedOther.isSetNumericSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumericSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numericSort, typedOther.numericSort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.user = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LANGUAGE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.language = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TEST
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.test = iprot.readBool();
            setTestIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // INPUT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.input = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // MAPPER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.mapper = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // REDUCER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.reducer = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // MAP_TASKS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.mapTasks = iprot.readI32();
            setMapTasksIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // REDUCE_TASKS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.reduceTasks = iprot.readI32();
            setReduceTasksIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // NUMERIC_SORT
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.numericSort = iprot.readBool();
            setNumericSortIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.user != null) {
      oprot.writeFieldBegin(USER_FIELD_DESC);
      oprot.writeString(this.user);
      oprot.writeFieldEnd();
    }
    if (this.language != null) {
      oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TEST_FIELD_DESC);
    oprot.writeBool(this.test);
    oprot.writeFieldEnd();
    if (this.mapper != null) {
      oprot.writeFieldBegin(MAPPER_FIELD_DESC);
      oprot.writeString(this.mapper);
      oprot.writeFieldEnd();
    }
    if (this.reducer != null) {
      oprot.writeFieldBegin(REDUCER_FIELD_DESC);
      oprot.writeString(this.reducer);
      oprot.writeFieldEnd();
    }
    if (isSetMapTasks()) {
      oprot.writeFieldBegin(MAP_TASKS_FIELD_DESC);
      oprot.writeI32(this.mapTasks);
      oprot.writeFieldEnd();
    }
    if (isSetReduceTasks()) {
      oprot.writeFieldBegin(REDUCE_TASKS_FIELD_DESC);
      oprot.writeI32(this.reduceTasks);
      oprot.writeFieldEnd();
    }
    if (this.input != null) {
      oprot.writeFieldBegin(INPUT_FIELD_DESC);
      oprot.writeString(this.input);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NUMERIC_SORT_FIELD_DESC);
    oprot.writeBool(this.numericSort);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobRequest(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("test:");
    sb.append(this.test);
    first = false;
    if (!first) sb.append(", ");
    sb.append("input:");
    if (this.input == null) {
      sb.append("null");
    } else {
      sb.append(this.input);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapper:");
    if (this.mapper == null) {
      sb.append("null");
    } else {
      sb.append(this.mapper);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reducer:");
    if (this.reducer == null) {
      sb.append("null");
    } else {
      sb.append(this.reducer);
    }
    first = false;
    if (isSetMapTasks()) {
      if (!first) sb.append(", ");
      sb.append("mapTasks:");
      sb.append(this.mapTasks);
      first = false;
    }
    if (isSetReduceTasks()) {
      if (!first) sb.append(", ");
      sb.append("reduceTasks:");
      sb.append(this.reduceTasks);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("numericSort:");
    sb.append(this.numericSort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

